// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: order.sql

package db

import (
	"context"
)

const createOrder = `-- name: CreateOrder :one
INSERT INTO orders (
  product, customer, quantity, order_status
) VALUES (
  $1, $2, $3, $4
)
RETURNING id, product, customer, quantity, order_status, created_at
`

type CreateOrderParams struct {
	Product     int64       `json:"product"`
	Customer    int64       `json:"customer"`
	Quantity    int64       `json:"quantity"`
	OrderStatus Orderstatus `json:"order_status"`
}

func (q *Queries) CreateOrder(ctx context.Context, arg CreateOrderParams) (Order, error) {
	row := q.db.QueryRowContext(ctx, createOrder,
		arg.Product,
		arg.Customer,
		arg.Quantity,
		arg.OrderStatus,
	)
	var i Order
	err := row.Scan(
		&i.ID,
		&i.Product,
		&i.Customer,
		&i.Quantity,
		&i.OrderStatus,
		&i.CreatedAt,
	)
	return i, err
}

const deleteOrder = `-- name: DeleteOrder :exec
DELETE FROM orders 
WHERE id = $1
`

func (q *Queries) DeleteOrder(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteOrder, id)
	return err
}

const getOrder = `-- name: GetOrder :one
SELECT id, product, customer, quantity, order_status, created_at FROM orders 
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetOrder(ctx context.Context, id int64) (Order, error) {
	row := q.db.QueryRowContext(ctx, getOrder, id)
	var i Order
	err := row.Scan(
		&i.ID,
		&i.Product,
		&i.Customer,
		&i.Quantity,
		&i.OrderStatus,
		&i.CreatedAt,
	)
	return i, err
}

const listOrders = `-- name: ListOrders :many
SELECT id, product, customer, quantity, order_status, created_at FROM orders
ORDER BY id
LIMIT $1 
OFFSET $2
`

type ListOrdersParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListOrders(ctx context.Context, arg ListOrdersParams) ([]Order, error) {
	rows, err := q.db.QueryContext(ctx, listOrders, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Order
	for rows.Next() {
		var i Order
		if err := rows.Scan(
			&i.ID,
			&i.Product,
			&i.Customer,
			&i.Quantity,
			&i.OrderStatus,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateOrder = `-- name: UpdateOrder :one
UPDATE orders SET order_status = $2
WHERE id = $1
RETURNING id, product, customer, quantity, order_status, created_at
`

type UpdateOrderParams struct {
	ID          int64       `json:"id"`
	OrderStatus Orderstatus `json:"order_status"`
}

func (q *Queries) UpdateOrder(ctx context.Context, arg UpdateOrderParams) (Order, error) {
	row := q.db.QueryRowContext(ctx, updateOrder, arg.ID, arg.OrderStatus)
	var i Order
	err := row.Scan(
		&i.ID,
		&i.Product,
		&i.Customer,
		&i.Quantity,
		&i.OrderStatus,
		&i.CreatedAt,
	)
	return i, err
}
