// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0

package db

import (
	"database/sql/driver"
	"fmt"
	"time"
)

type Orderstatus string

const (
	OrderstatusProcessing Orderstatus = "processing"
	OrderstatusIssue      Orderstatus = "issue"
	OrderstatusComplete   Orderstatus = "complete"
)

func (e *Orderstatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = Orderstatus(s)
	case string:
		*e = Orderstatus(s)
	default:
		return fmt.Errorf("unsupported scan type for Orderstatus: %T", src)
	}
	return nil
}

type NullOrderstatus struct {
	Orderstatus Orderstatus
	Valid       bool // Valid is true if Orderstatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullOrderstatus) Scan(value interface{}) error {
	if value == nil {
		ns.Orderstatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.Orderstatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullOrderstatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.Orderstatus), nil
}

type Customer struct {
	ID        int64  `json:"id"`
	FirstName string `json:"first_name"`
	LastName  string `json:"last_name"`
	Email     string `json:"email"`
	Phone     string `json:"phone"`
	Address   string `json:"address"`
}

type Order struct {
	ID          int64       `json:"id"`
	Product     int64       `json:"product"`
	Customer    int64       `json:"customer"`
	Quantity    int64       `json:"quantity"`
	OrderStatus Orderstatus `json:"order_status"`
	CreatedAt   time.Time   `json:"created_at"`
}

type Product struct {
	ID   int64  `json:"id"`
	Name string `json:"name"`
}
